{"version":3,"sources":["Redux/general-reducer.ts","Components/Common/validate.ts","Components/Common/styles.ts","Components/General/GeneralEditForm.tsx","Components/General/GeneralReadOnlyForm.tsx","Components/General/GeneralInfo.tsx","Redux/education-reducer.ts","Components/Education/EducationEditForm.tsx","Components/Education/EducationReadOnlyForm.tsx","Components/Education/EducationInfo.tsx","Redux/practical-reducer.ts","Components/Practical/PracticalExperienceReadOnlyForm.tsx","Components/Practical/PracticalExperienceInfo.tsx","Components/Result/ResultInfo.tsx","Main.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["initialState","firstName","lastName","email","dateOfBirth","gender","isSave","actions","type","payload","generalReducer","state","action","_","SignupSchemaEducationForm","Yup","shape","schoolName","required","titleOfStudy","dateOfStudyFrom","nullable","dateOfStudyTo","SignupSchemaGeneralForm","SignupSchemaPracticalExperienceForm","companyName","positionTitle","dateFrom","dateTo","layout","labelCol","span","wrapperCol","validation","color","GeneralEditForm","React","memo","props","validationSchema","onSubmit","submit","initialValues","generalInfo","render","Item","name","style","paddingTop","showValidateSuccess","label","locale","width","textAlign","placeholder","Option","value","alignContent","push","justify","ghost","htmlType","icon","SaveOutlined","GeneralReadOnlyForm","bordered","readOnly","moment","format","onClick","edit","EditOutlined","GeneralInfo","isSaved","useSelector","dispatch","useDispatch","message","warning","values","setSubmitting","success","educationReducer","EducationEditForm","educationInfo","EducationReadOnlyForm","EducationInfo","practicals","mainTasks","practicalReducer","columns","title","dataIndex","overflow","ellipsis","PracticalExperienceReadOnlyForm","data","map","ci","i","Object","create","key","length","whiteSpace","dataSource","size","pagination","TextArea","AntdInput","PracticalExperienceInfo","useState","visible","setVisible","Form","useForm","form","resolver","yupResolver","register","errors","control","onCreate","onCancel","paddingLeft","CollectionCreateForm","handleSubmit","okText","cancelText","cancelButtonProps","display","okButtonProps","className","as","defaultValue","showCount","maxLength","Panel","Collapse","Result","offset","header","Step","Steps","Header","Layout","Content","Footer","Main","setSaved","steps","content","result","current","setCurrent","console","log","position","zIndex","fontVariant","fontSize","padding","marginTop","paddingBottom","item","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ec37a32f.chunk.js","sourcesContent":["import {InferActionsTypes} from \"./store\";\nimport * as _ from 'lodash';\n\nlet initialState = {\n    firstName: '' as string,\n    lastName: '' as string,\n    email: '' as string,\n    dateOfBirth: null as Date | null,\n    gender: '' as GenderType,\n    isSave: false\n}\n\ntype GenderType = 'Male' | 'Female';\n\nconst generalReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'CV/SET_GENERAL_INFO':\n            return _.merge(state, action.payload);\n        case 'CV/GET_GENERAL_INFO':\n            return {\n                ...state\n            }\n        case 'CV/EDIT_GENERAL_INFO':\n            return _.merge(state, action.payload);\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setGeneralInfo: (firstName:string, lastName: string, email: string, dateOfBirth: Date | null, gender: GenderType, isSave: boolean) => ({\n        type: 'CV/SET_GENERAL_INFO', payload:{firstName, lastName, email, dateOfBirth, gender, isSave}} as const),\n    getGeneralInfo: () => ({type: 'CV/GET_GENERAL_INFO'} as const),\n    editGeneralInfo: (isSave:boolean) => ({type: 'CV/EDIT_GENERAL_INFO', payload: {isSave}} as const),\n}\n\nexport default generalReducer;\nexport type InitialState = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;","import * as Yup from \"yup\";\n\nexport const SignupSchemaEducationForm = Yup.object().shape({\n    schoolName: Yup.string()\n        .required('Please, input your school name.'),\n    titleOfStudy: Yup.string()\n        .required('Please, input your title of study.'),\n    dateOfStudyFrom: Yup.date()\n        .required('Please, input when you start study.')\n        .nullable(),\n    dateOfStudyTo: Yup.date()\n        .required('Please, input when you end study.')\n        .nullable(),\n});\n\nexport const SignupSchemaGeneralForm= Yup.object().shape({\n    firstName: Yup.string()\n        .required('Please, input your first name.'),\n    lastName: Yup.string()\n        .required('Please, input your last name.'),\n    email: Yup.string().email('Invalid email').required('Please, input your email.'),\n    dateOfBirth: Yup.date()\n        .required('Please, input your date of birth.')\n        .nullable(),\n    gender: Yup.string().required('Please, input your gender type.')\n});\n\nexport const SignupSchemaPracticalExperienceForm = Yup.object().shape({\n    companyName: Yup.string()\n        .required('Please, input your company name.'),\n    positionTitle: Yup.string()\n        .required('Please, input your position title.'),\n    dateFrom: Yup.object()\n        .required('Please, input when you start work.')\n        .nullable(),\n    dateTo: Yup.object()\n        .required('Please, input when you end work.')\n        .nullable(),\n});","export const layout = {\n    labelCol: {span: 8},\n    wrapperCol: {span: 16},\n};\n\nexport const validation = {\n    color: {color: 'red'}\n}","import React from 'react';\nimport {DatePicker, Form, Input, Select} from \"formik-antd\";\nimport Row from \"antd/lib/grid/row\";\nimport locale from \"antd/es/date-picker/locale/ru_RU\";\nimport {Formik} from \"formik\";\nimport {SignupSchemaGeneralForm} from \"../Common/validate\";\nimport Col from \"antd/lib/grid/col\";\nimport {Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {valuesTypeForGeneralInfoEdit} from '../Common/types';\nimport { layout } from '../Common/styles';\n\nexport const GeneralEditForm: React.FC<valuesTypeForGeneralInfoEdit> = React.memo((props) => {\n    return (\n        <>\n            <Formik\n                validationSchema={SignupSchemaGeneralForm}\n                onSubmit={props.submit}\n                initialValues={props.generalInfo}\n                render={() => (\n                    <Form\n                        {...layout}>\n                        <Form.Item name=\"firstName\" style={{paddingTop: 20}}\n                                   showValidateSuccess\n                                   label={'First Name'}>\n                            <Input name={'firstName'}/>\n                        </Form.Item>\n                        <Form.Item name=\"lastName\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'Last Name'}>\n                            <Input name={'lastName'}/>\n                        </Form.Item>\n\n                        <Form.Item name=\"email\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'Email'}>\n                            <Input name={'email'}/>\n                        </Form.Item>\n\n                        <Form.Item name=\"dateOfBirth\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'Date of birth'}>\n                            <DatePicker name={'dateOfBirth'} locale={locale} style={{width: '100%'}}/>\n                        </Form.Item>\n\n                        <Form.Item name=\"gender\" style={{paddingTop: 10, textAlign: 'left'}}\n                                   showValidateSuccess\n                                   label={'Gender'}>\n                            <Select name={'gender'}\n                                    placeholder=\"Pick your gender\">\n                                <Select.Option value=\"Male\">Male</Select.Option>\n                                <Select.Option value=\"Female\">Female</Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Col style={{alignContent: 'center', textAlign: 'center', paddingTop: 50}}\n                             push={12}>\n                            <Form.Item name={'submitButton'}>\n                                <Row justify={'space-between'}\n                                     style={{alignContent: 'center', textAlign: 'center'}}>\n                                    <Button type=\"primary\" ghost htmlType=\"submit\" name={'saveButton'}\n                                            icon={<SaveOutlined/>}>\n                                        Save\n                                    </Button>\n                                </Row>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n                )}\n            />\n        </>\n    )\n})","import React from 'react';\nimport {Form, Input} from \"formik-antd\";\nimport moment from \"moment\";\nimport {valuesTypeForGeneralInfoReadOnly} from \"../Common/types\";\nimport {Formik} from \"formik\";\nimport Row from \"antd/lib/grid/row\";\nimport Col from \"antd/lib/grid/col\";\nimport {Button} from \"antd\";\nimport {EditOutlined} from \"@ant-design/icons\";\nimport { layout } from '../Common/styles';\n\nexport const GeneralReadOnlyForm: React.FC<valuesTypeForGeneralInfoReadOnly> = React.memo((props) => {\n\n\n\n    return (\n        <>\n            <Formik\n                //@ts-ignore\n                onSubmit={() => null}\n                initialValues={props.generalInfo}\n                render={() => (\n                    <Form\n                        {...layout}>\n                        <Form.Item name=\"firstName\" style={{paddingTop: 20}}\n                                   label={'First Name'}>\n                            <Input name={'firstName'}\n                                   bordered={false}\n                                   value={props.generalInfo.firstName}\n                                   readOnly/>\n                        </Form.Item>\n                        <Form.Item name=\"lastName\"\n                                   label={'Last Name'}>\n                            <Input name={'lastName'}\n                                   value={props.generalInfo.lastName}\n                                   bordered={false}\n                                   readOnly/>\n                        </Form.Item>\n\n                        <Form.Item name=\"email\"\n                                   label={'Email'}>\n                            <Input name={'email'}\n                                   value={props.generalInfo.email}\n                                   bordered={false}\n                                   readOnly/>\n                        </Form.Item>\n\n                        <Form.Item name='dateOfBirthday'\n                                   label={'Date of birth'}>\n                            <Input name='dateOfBirthday'\n                                   bordered={false}\n                                   readOnly\n                                   value={moment(props.generalInfo.dateOfBirth).format('Do  MMMM YYYY')}/>\n                        </Form.Item>\n\n                        <Form.Item name=\"gender\"\n                                   label={'Gender'}>\n                            <Input name={'gender'}\n                                   style={{paddingTop: 10, textAlign: 'left'}}\n                                   value={props.generalInfo.gender}\n                                   bordered={false}\n                                   readOnly/>\n                        </Form.Item>\n                        <Col style={{alignContent: 'center', textAlign: 'center', paddingTop: 50}}\n                             push={12}>\n                            <Form.Item name={'editButton'}>\n                                <Row justify={'space-between'}\n                                     style={{alignContent: 'center', textAlign: 'center'}}>\n                                    <Button type=\"primary\"\n                                            onClick={props.edit}\n                                            ghost\n                                            name={'submitButton'}\n                                            icon={<EditOutlined/>}>\n                                        Edit\n                                    </Button>\n                                </Row>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n                )}\n            />\n        </>\n    )\n})","import React from 'react';\nimport Col from 'antd/lib/grid/col';\nimport Row from 'antd/lib/grid/row';\nimport Layout from 'antd/lib/layout';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/store\";\nimport {actions} from \"../../Redux/general-reducer\";\nimport {GeneralEditForm} from \"./GeneralEditForm\";\nimport {GeneralReadOnlyForm} from \"./GeneralReadOnlyForm\";\nimport { valuesTypeForGeneralInfo } from '../Common/types';\nimport {message} from \"antd\";\n\nexport const GeneralInfo: React.FC = React.memo(() => {\n    const isSaved = useSelector((state: AppStateType) => state.generalReducer.isSave);\n    const generalInfo = useSelector((state: AppStateType) => state.generalReducer);\n\n    const dispatch = useDispatch();\n\n    const submit = (values: valuesTypeForGeneralInfo, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        dispatch(actions.setGeneralInfo(values.firstName, values.lastName, values.email, values.dateOfBirth, values.gender, true));\n        setSubmitting(false);\n        message.success('Saved');\n    }\n    const edit = () => {\n        dispatch(actions.editGeneralInfo(false));\n        message.warning('Edit')\n    }\n\n    return (\n        <>\n            <Layout>\n                <Row justify={'center'}>\n                    <Col style={{alignContent: 'center', textAlign: 'center'}} span={7}>\n                        {!isSaved\n                            ? <GeneralEditForm submit={submit}\n                                               generalInfo={generalInfo}/>\n                            : <GeneralReadOnlyForm edit={edit}\n                                                   generalInfo={generalInfo}/>\n                        }\n                    </Col>\n                </Row>\n            </Layout>\n        </>\n    )\n});","import {InferActionsTypes} from \"./store\";\nimport * as _ from 'lodash';\n\nlet initialState = {\n    schoolName: '' as string,\n    titleOfStudy: '' as string,\n    dateOfStudyFrom: null as Date | null,\n    dateOfStudyTo: null as Date | null,\n    isSave: false\n}\n\nconst educationReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'CV/SET_EDUCATION_INFO':\n            return _.merge(state, action.payload);\n        case 'CV/GET_EDUCATION_INFO':\n            return {\n                ...state\n            }\n        case 'CV/EDIT_EDUCATION_INFO':\n            return _.merge(state, action.payload);\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setEducationInfo: (schoolName:string, titleOfStudy: string, dateOfStudyFrom: Date | null, dateOfStudyTo: Date | null, isSave: boolean) => ({\n        type: 'CV/SET_EDUCATION_INFO', payload:{schoolName, titleOfStudy, dateOfStudyFrom, dateOfStudyTo, isSave}} as const),\n    getEducationInfo: () => ({type: 'CV/GET_EDUCATION_INFO'} as const),\n    editEducationInfo: (isSave:boolean) => ({type: 'CV/EDIT_EDUCATION_INFO', payload: {isSave}} as const),\n}\n\nexport default educationReducer;\nexport type InitialState = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;","import React from 'react';\nimport {DatePicker, Form, Input} from \"formik-antd\";\nimport Row from \"antd/lib/grid/row\";\nimport locale from \"antd/es/date-picker/locale/ru_RU\";\nimport {Formik} from \"formik\";\nimport {SignupSchemaEducationForm} from \"../Common/validate\";\nimport Col from \"antd/lib/grid/col\";\nimport {Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {valuesTypeForEducationInfoEdit } from '../Common/types';\nimport { layout } from '../Common/styles';\n\nexport const EducationEditForm: React.FC<valuesTypeForEducationInfoEdit> = React.memo((props) => {\n    return (\n        <>\n            <Formik\n                validationSchema={SignupSchemaEducationForm}\n                onSubmit={props.submit}\n                initialValues={props.educationInfo}\n                render={() => (\n                    <Form\n                        {...layout}>\n                        <Form.Item name=\"schoolName\" style={{paddingTop: 10}}\n                                   label={'School name'}\n                                   showValidateSuccess>\n                            <Input name={'schoolName'}/>\n                        </Form.Item>\n                        <Form.Item name=\"titleOfStudy\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'Title of study'}>\n                            <Input name={'titleOfStudy'}/>\n                        </Form.Item>\n\n                        <Row justify={'center'}>\n                        </Row>\n                        <Form.Item name=\"dateOfStudyFrom\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'From'}>\n                            <DatePicker name={'dateOfStudyFrom'} locale={locale} style={{width: '100%'}}/>\n                        </Form.Item>\n                        <Form.Item name=\"dateOfStudyTo\" style={{paddingTop: 10}}\n                                   showValidateSuccess\n                                   label={'To'}>\n                            <DatePicker name={'dateOfStudyTo'} locale={locale} style={{width: '100%'}}/>\n                        </Form.Item>\n                        <Col style={{alignContent: 'center', textAlign: 'center', paddingTop: 50}}\n                             push={12}>\n                            <Form.Item name={'submitButton'}>\n                                <Row justify={'space-between'}\n                                     style={{alignContent: 'center', textAlign: 'center'}}>\n                                    <Button type=\"primary\" ghost htmlType=\"submit\" name={'saveButton'}\n                                            icon={<SaveOutlined/>}>\n                                        Save\n                                    </Button>\n                                </Row>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n                )}\n            />\n\n        </>\n    )\n})","import React from 'react';\nimport {Form, Input} from \"formik-antd\";\nimport moment from \"moment\";\nimport {valuesTypeForEducationInfoReadOnly} from \"../Common/types\";\nimport {Formik} from \"formik\";\nimport {SignupSchemaEducationForm} from \"../Common/validate\";\nimport Row from \"antd/lib/grid/row\";\nimport Col from \"antd/lib/grid/col\";\nimport {Button} from \"antd\";\nimport {EditOutlined} from \"@ant-design/icons\";\nimport { layout } from '../Common/styles';\n\nexport const EducationReadOnlyForm: React.FC<valuesTypeForEducationInfoReadOnly> = React.memo((props) => {\n\n\n\n    return (\n        <>\n            <Formik\n                validationSchema={SignupSchemaEducationForm}\n                // @ts-ignore\n                onSubmit={() => null}\n                initialValues={props.educationInfo}\n                render={() => (\n                    <Form\n                        {...layout}>\n                        <Form.Item name=\"schoolName\" style={{paddingTop: 20}}\n                                   label={'School Name'}>\n                            <Input name={'schoolName'}\n                                   bordered={false}\n                                   value={props.educationInfo.schoolName}\n                                   readOnly/>\n                        </Form.Item>\n                        <Form.Item name=\"titleOfStudy\"\n                                   label={'Title of study'}>\n                            <Input name={'titleOfStudy'}\n                                   value={props.educationInfo.titleOfStudy}\n                                   bordered={false}\n                                   readOnly/>\n                        </Form.Item>\n                        <Form.Item name=\"dateOfStudyFrom\"\n                                   label={'From'}>\n                            <Input name='dateOfStudyFrom'\n                                   bordered={false}\n                                   readOnly\n                                   value={moment(props.educationInfo.dateOfStudyFrom).format('Do  MMMM YYYY')}/>\n                        </Form.Item>\n                        <Form.Item name=\"dateOfStudyTo\"\n                                   label={'To'}>\n                            <Input name='dateOfStudyFrom'\n                                   bordered={false}\n                                   readOnly\n                                   value={moment(props.educationInfo.dateOfStudyTo).format('Do  MMMM YYYY')}/>\n                        </Form.Item>\n\n                        <Col style={{alignContent: 'center', textAlign: 'center', paddingTop: 50}}\n                             push={12}>\n                            <Form.Item name={'editButton'}>\n                                <Row justify={'space-between'}\n                                     style={{alignContent: 'center', textAlign: 'center'}}>\n                                    <Button type=\"primary\"\n                                            onClick={props.edit}\n                                            ghost\n                                            name={'l'}\n                                            icon={<EditOutlined/>}>\n                                        Edit\n                                    </Button>\n                                </Row>\n                            </Form.Item>\n                        </Col>\n                    </Form>)}/>\n        </>\n    )\n})","import React from 'react';\nimport Col from 'antd/lib/grid/col';\nimport Row from 'antd/lib/grid/row';\nimport Layout from 'antd/lib/layout';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/store\";\nimport {actions} from \"../../Redux/education-reducer\";\nimport {EducationEditForm} from \"./EducationEditForm\";\nimport {valuesTypeForEducationInfo} from \"../Common/types\";\nimport {EducationReadOnlyForm} from \"./EducationReadOnlyForm\";\nimport {message} from \"antd\";\n\nexport const EducationInfo: React.FC = React.memo(() => {\n    const isSaved = useSelector((state: AppStateType) => state.educationReducer.isSave);\n\n    const educationInfo = useSelector((state: AppStateType) => state.educationReducer);\n\n    const dispatch = useDispatch();\n\n    const submit = (values: valuesTypeForEducationInfo, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        dispatch(actions.setEducationInfo(values.schoolName, values.titleOfStudy, values.dateOfStudyFrom, values.dateOfStudyTo, true));\n        setSubmitting(false);\n        message.success('Saved');\n    }\n    const edit = () => {\n        dispatch(actions.editEducationInfo(false));\n        message.warning('Edit')\n    }\n\n    return (\n        <>\n            <Layout>\n                <Row justify={'center'}>\n                    <Col style={{alignContent: 'center', textAlign: 'center'}} span={7}>\n                        {!isSaved\n                            ? <EducationEditForm submit={submit}\n                                                 educationInfo={educationInfo}/>\n                            : <EducationReadOnlyForm\n                                educationInfo={educationInfo}\n                                edit={edit}/>\n                        }\n                    </Col>\n                </Row>\n            </Layout>\n        </>\n    )\n});","import {InferActionsTypes} from \"./store\";\nimport * as _ from 'lodash';\nimport {companyInfo} from \"../Components/Common/types\";\n\nlet initialState = {\n    practicals: [] as Array<companyInfo>,\n    isSave: true\n}\n\nconst practicalReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'CV/SET_COMPANY_INFO':\n            return {\n                ...state,\n                practicals: [...state.practicals, action.payload],\n            }\n\n        case 'CV/GET_COMPANY_INFO':\n            return {\n                ...state\n            }\n        case 'CV/EDIT_COMPANY_INFO':\n            return _.merge(state, action.payload);\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setPracticalExpInfo: (companyName: string, positionTitle: string, mainTasks: string, dateFrom: Date | null, dateTo: Date | null, isSave: boolean) => ({\n        type: 'CV/SET_COMPANY_INFO', payload: {companyName, positionTitle, mainTasks, dateFrom, dateTo, isSave}\n    } as const),\n    getPracticalEpxInfo: () => ({type: 'CV/GET_COMPANY_INFO'} as const),\n    editPracticalEpxInfo: (isSave: boolean) => ({type: 'CV/EDIT_COMPANY_INFO', payload: {isSave}} as const),\n}\n\nexport default practicalReducer;\nexport type InitialState = typeof initialState;\ntype ActionsTypes = InferActionsTypes<typeof actions>;","import React from \"react\";\nimport {Table} from 'antd';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/store\";\nimport moment from \"moment\";\n\nconst columns = [\n    {\n        title: 'Position Title',\n        dataIndex: 'positionTitle',\n\n        overflow: 'wrap'\n    },\n    {\n        title: 'Company Name',\n        dataIndex: 'companyName',\n        ellipsis: true,\n        width: '200px'\n    },\n    {\n        title: 'About your tasks',\n        dataIndex: 'mainTasks',\n    },\n    {\n        title: 'From',\n        dataIndex: 'dateFrom',\n    },\n    {\n        title: 'To',\n        dataIndex: 'dateTo',\n    },\n];\n\nexport const PracticalExperienceReadOnlyForm: React.FC = React.memo(() => {\n    const practicalExpInfo = useSelector((state: AppStateType) => state.practicalReducer.practicals);\n    const data = practicalExpInfo.map((ci, i) => (\n        Object.create(\n            {\n                key: i,\n                companyName: ci.companyName,\n                positionTitle: ci.positionTitle,\n                mainTasks: ci.mainTasks,\n                dateFrom: moment(ci.dateFrom).format('l'),\n                dateTo: moment(ci.dateTo).format('l'),\n            }\n        )\n    ))\n\n\n    return (\n        <>\n            {data.length === 0 ?\n                <>\n                </> :\n                <Table\n                    style={{whiteSpace: 'unset'}}\n                    columns={columns}\n                    dataSource={data}\n                    size=\"large\"\n                    pagination={false}/>\n            }\n        </>\n    )\n});","import React, {useState} from 'react';\nimport {Button, Modal, Form, Input as AntdInput, Row, Col, message} from 'antd';\nimport {useForm, Controller} from 'react-hook-form';\nimport {SignupSchemaPracticalExperienceForm} from \"../Common/validate\";\nimport {yupResolver} from '@hookform/resolvers/yup';\nimport {DatePicker} from 'antd';\nimport {useDispatch} from \"react-redux\";\nimport {actions} from \"../../Redux/practical-reducer\";\nimport {CollectionCreateFormProps, companyInfo } from '../Common/types';\nimport { PracticalExperienceReadOnlyForm } from './PracticalExperienceReadOnlyForm';\nimport {validation} from \"../Common/styles\";\n\nconst {TextArea} = AntdInput;\n\nconst initialValues = {\n    positionTitle: '',\n    companyName: '',\n    mainTasks: '',\n    dateFrom: null as Date | null,\n    dateTo: null as Date | null,\n    isSave: false\n}\n\nexport const PracticalExperienceInfo = () => {\n    const [visible, setVisible] = useState(false);\n    const [form] = Form.useForm();\n    const {register, errors, control} = useForm<companyInfo>({\n        resolver: yupResolver(SignupSchemaPracticalExperienceForm)\n    });\n    const dispatch = useDispatch();\n    const onCreate = (data: companyInfo) => {\n        dispatch(actions.setPracticalExpInfo(data.companyName,data.positionTitle,data.mainTasks,data.dateFrom,data.dateTo,true));\n        setVisible(false);\n        message.success('Work added')\n    }\n\n    return (\n        <div>\n            <CollectionCreateForm\n                visible={visible}\n\n                onCreate={onCreate}\n                onCancel={() => {\n                    setVisible(false);\n                }}\n                initialValues={initialValues}\n                form={form}\n                register={register}\n                errors={errors}\n                control={control}\n            />\n            <Row justify={'center'}>\n                <Col style={{paddingLeft: '65px', paddingTop: '30px'}}>\n                   <PracticalExperienceReadOnlyForm/>\n                </Col>\n            </Row>\n            <Row justify={'center'}>\n                <Col style={{paddingLeft: '65px', paddingTop: '30px'}}>\n                    <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                            setVisible(true);\n                        }}\n                    >\n                        Add work\n                    </Button>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\n\nconst CollectionCreateForm: React.FC<CollectionCreateFormProps> = ({\n                                                                       visible,\n                                                                       onCreate,\n                                                                       onCancel,\n                                                                       initialValues,\n                                                                   }) => {\n\n    const {handleSubmit, errors, control} = useForm<typeof initialValues>({\n        resolver: yupResolver(SignupSchemaPracticalExperienceForm)\n    });\n\n    return (\n        <>\n            <Modal\n                visible={visible}\n                title=\"Add your practical experience\"\n                okText=\"Create\"\n                cancelText=\"Cancel\"\n                onCancel={onCancel}\n                cancelButtonProps={{style: {display: 'none'}}}\n                okButtonProps={{style: {display: 'none'}}}>\n                <form onSubmit={handleSubmit(onCreate)}>\n                    <div className='input-group'>\n                        <label className='label'>Company name</label>\n                        <Controller\n                            as={<AntdInput name={'companyName'}/>}\n                            name='companyName'\n                            control={control}\n                            defaultValue=''\n                        />\n                        <p style={validation.color}>{errors.companyName?.message}</p>\n                        <label className='label'>Position title</label>\n                        <Controller\n                            as={<AntdInput name={'positionTitle'}/>}\n                            name='positionTitle'\n                            control={control}\n                            defaultValue=''\n                        />\n                        <p style={validation.color}>{errors.positionTitle?.message}</p>\n                        <Row justify={'space-between'}>\n                            <Col span={7}>\n                                <label className='label'>Start date</label>\n                                <Controller\n                                    as={<DatePicker name={'dateFrom'}/>}\n                                    name='dateFrom'\n                                    control={control}\n                                    defaultValue=''\n                                />\n                                <p style={validation.color}>{errors.dateFrom?.message}</p>\n                            </Col>\n                            <Col span={7}>\n                                <label className='label'>End date</label>\n                                <Controller\n                                    as={<DatePicker name={'dateTo'}/>}\n                                    name='dateTo'\n                                    control={control}\n                                    defaultValue=''\n                                />\n                                <p style={validation.color}>{errors.dateTo?.message}</p>\n                            </Col>\n                        </Row>\n                        <p/>\n                        <label className='label'>About your tasks</label>\n                        <Controller\n                            as={<TextArea name={'mainTasks'} showCount maxLength={300}/>}\n                            name='mainTasks'\n                            control={control}\n                            defaultValue=''\n                        />\n                        <p>{errors.mainTasks?.message}</p>\n                    </div>\n                    <Row justify={'end'}>\n                        <Col>\n                            <Button type='primary' htmlType='submit'>\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </form>\n            </Modal>\n        </>\n    );\n};\n","import React from 'react';\nimport {Col, Row} from \"antd\";\nimport {Collapse} from 'antd';\nimport { Descriptions } from 'antd';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/store\";\nimport { PracticalExperienceReadOnlyForm } from '../Practical/PracticalExperienceReadOnlyForm';\nimport moment from 'moment';\n\nconst {Panel} = Collapse;\n\nexport const Result: React.FC = React.memo(() => {\n    const generalInfo = useSelector((state: AppStateType) => state.generalReducer);\n    const educationInfo = useSelector((state: AppStateType) => state.educationReducer);\n    return (\n        <>\n            <Row>\n                <Col span={16} offset={4}>\n                    <Collapse>\n                        <Panel header=\"General\" key=\"1\">\n                            <Descriptions title=\"General info\">\n                                <Descriptions.Item label=\"First name\">{generalInfo.firstName}</Descriptions.Item>\n                                <Descriptions.Item label=\"Last name\">{generalInfo.lastName}</Descriptions.Item>\n                                <Descriptions.Item label=\"Email\">{generalInfo.email}</Descriptions.Item>\n                                <Descriptions.Item label=\"Date of birth\">{moment(generalInfo.dateOfBirth).format('LL')}</Descriptions.Item>\n                                <Descriptions.Item label=\"Gender\">{generalInfo.gender}</Descriptions.Item>\n                            </Descriptions>\n                        </Panel>\n\n                        <Panel header=\"Education\" key=\"2\">\n                            <Descriptions title=\"Education info\">\n                                <Descriptions.Item label=\"School name\">{educationInfo.schoolName}</Descriptions.Item>\n                                <Descriptions.Item label=\"Title of study\">{educationInfo.titleOfStudy}</Descriptions.Item>\n                                <Descriptions.Item label=\"From\">{moment(educationInfo.dateOfStudyFrom).format('LL')}</Descriptions.Item>\n                                <Descriptions.Item label=\"To\">{moment(educationInfo.dateOfStudyTo).format('LL')}</Descriptions.Item>\n                            </Descriptions>\n                        </Panel>\n                        <Panel header=\"Practical experience\" key=\"3\">\n                            <PracticalExperienceReadOnlyForm/>\n                        </Panel>\n                    </Collapse>\n                </Col>\n            </Row>\n        </>\n    )\n})\n\n","import React, { useState } from 'react';\nimport \"antd/dist/antd.css\";\nimport {Steps, Button, message, Layout} from 'antd';\nimport {GeneralInfo} from './Components/General/GeneralInfo';\nimport {EducationInfo} from './Components/Education/EducationInfo';\nimport {PracticalExperienceInfo} from \"./Components/Practical/PracticalExperienceInfo\";\nimport {Result} from \"./Components/Result/ResultInfo\";\nimport {Col} from \"antd/lib/grid\";\n\nconst {Step} = Steps;\nconst {Header, Content, Footer} = Layout;\n\nconst Main: React.FC = React.memo(() => {\n    const [isSaved, setSaved] = useState(false);\n    const steps = [\n        {\n            title: 'General Info',\n            content: <GeneralInfo/>,\n        },\n        {\n            title: 'Education Experience',\n            content: <EducationInfo/>,\n        },\n        {\n            title: 'Practical Experience',\n            content: <PracticalExperienceInfo/>,\n        },\n\n    ];\n\n    const result = {\n        title: 'Result',\n        content: <Result/>,\n    }\n\n    const [current, setCurrent] = React.useState(0);\n\n    const next = () => {\n        setCurrent(current + 1);\n    };\n\n    const prev = () => {\n        setCurrent(current - 1);\n    };\n\n    const whenComplete = () => {\n        message.success('Processing complete!')\n        //isSaved = true\n        setSaved(true);\n        console.log('whenComplete: ' + isSaved)\n    }\n\n    const whenEdit = () => {\n\n        setSaved(false);\n    }\n\n    return (\n        <>\n            {console.log('startApp: ' + isSaved)}\n            <Layout>\n                <Header style={{position: 'fixed', zIndex: 1, width: '100%'}}>\n                    <h1 style={{\n                        color: 'White',\n                        textAlign: 'center',\n                        fontVariant: 'tabular-nums',\n                        fontSize: '25px'\n                    }}>Curriculum vitae</h1>\n                </Header>\n\n                <Content className=\"site-layout\" style={{padding: '0 50px', marginTop: 80}}>\n                    {isSaved ?\n                        <>\n                            <Col span={12} offset={12} style={{paddingBottom: 24}}>\n                                <Steps current={current}>\n                                    <Step key={result.title} title={result.title}/>\n                                </Steps>\n                            </Col>\n                            <div className=\"steps-content\" style={{alignContent:'center'}}>{result.content}</div>\n                            <div className=\"steps-action\"\n                                 style={{textAlign: 'center', paddingTop: '20%', paddingLeft: '5%'}}>\n                                <Button type=\"primary\" onClick={whenEdit}>\n                                    Edit\n                                </Button>\n                            </div>\n                        </>\n                        : <>\n                            <Steps current={current}>\n                                {steps.map(item => (\n                                    <Step key={item.title} title={item.title}/>\n                                ))}\n                            </Steps>\n\n                            <div className=\"steps-content\">{steps[current].content}</div>\n\n                            <div className=\"steps-action\"\n                                 style={{textAlign: 'center', paddingTop: '20%', paddingLeft: '5%'}}>\n                                {current < steps.length - 1 && (\n                                    <Button type=\"primary\" onClick={() => next()}>\n                                        Next\n                                    </Button>\n                                )}\n                                {current === steps.length - 1 && (\n                                    <Button type=\"primary\" onClick={whenComplete}>\n                                        Done\n                                    </Button>\n                                )}\n                                {current > 0 && (\n                                    <Button style={{margin: '0 8px'}} onClick={() => prev()}>\n                                        Previous\n                                    </Button>\n                                )}\n                            </div>\n                        </>\n                    }\n                </Content>\n                <Footer style={{textAlign: 'center', paddingLeft: '7.5%'}}>Cv-Project ©2020</Footer>\n            </Layout>\n        </>\n    );\n})\n\nexport default Main;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport educationReducer from \"./education-reducer\";\nimport generalReducer from \"./general-reducer\";\nimport practicalReducer from \"./practical-reducer\";\n\n\nlet rootReducer = combineReducers({\n    generalReducer: generalReducer,\n    educationReducer: educationReducer,\n    practicalReducer: practicalReducer\n})\n\n// Create type for all reducers.\ntype RootReducerType = typeof rootReducer;\n\n// Create type for all state.\nexport type AppStateType = ReturnType<RootReducerType>\n\n// Create type for all actions.\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\n// Create type for thunks.\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// Add DevTools.\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport store from './Redux/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <Main/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}